(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'load-path "~/.emacs.d/lisp/emacs-eclim/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#ad7fa8" "#8cc4ff" "#eeeeec"])
 '(backup-by-copying t)
 '(backup-directory-alist (quote (("." . "~/tmp/ebak"))))
 '(bm-buffer-persistence t)
 '(bm-repository-file "~/.emacs.d/bm-repository")
 '(c-default-style (quote ((c-mode . "msytsma") (c++-mode . "msytsma") (java-mode . "eclipse-java") (awk-mode . "awk") (other . "gnu"))))
 '(comint-scroll-to-bottom-on-input t)
 '(compilation-scroll-output (quote first-error))
 '(cua-mode t nil (cua-base))
 '(custom-enabled-themes (quote (bluespider)))
 '(custom-safe-themes (quote ("119e21c262218098a8f508cbc4bf93839d8f0c3035c9d2b1d5794de6159e7b4b" "0c6a412fae52c01888f4cca695d5c77d9912ff864494dc9b2cf087117e57a432" "08d13adf965b11cae425f4bb0ad8aec94417f2fcc84fde85451b17c280a8c4f0" "76a7058dc3c8aff1760f4b49a7faca35641c90c64d535e9bd76e51d69dd17e2a" default)))
 '(delete-old-versions (quote other))
 '(desktop-files-not-to-save "^$")
 '(desktop-minor-mode-table (quote ((auto-fill-function auto-fill-mode) (vc-mode nil) (vc-dired-mode nil) (erc-track-minor-mode nil) (savehist-mode nil) (icicle-mode nil) (undo-tree-mode nil))))
 '(desktop-save t)
 '(desktop-save-mode t)
 '(dired-dwim-target t)
 '(eclim-eclipse-dirs (quote ("~/lib/eclipse/")))
 '(ediff-split-window-function (quote split-window-horizontally))
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(even-window-heights nil)
 '(gdb-create-source-file-list nil)
 '(global-auto-revert-mode t)
 '(global-undo-tree-mode t)
 '(help-at-pt-display-when-idle t nil (help-at-pt))
 '(ibuffer-expert t)
 '(ibuffer-formats (quote ((mark modified read-only " " (name 32 32 :left :elide) " " (size 9 -1 :right) " " (mode 16 16 :left :elide) " " filename-and-process) (mark " " (name 16 -1) " " filename))))
 '(ibuffer-show-empty-filter-groups nil)
 '(indent-tabs-mode nil)
 '(indicate-empty-lines t)
 '(kill-whole-line t)
 '(mouse-autoselect-window t)
 '(mouse-yank-at-point t)
 '(org-agenda-files (quote ("~/my.org")))
 '(save-place t nil (saveplace))
 '(scroll-bar-mode (quote left))
 '(scroll-conservatively 100000)
 '(scroll-margin 10)
 '(scroll-preserve-screen-position 1)
 '(semanticdb-default-save-directory "~/tmp/semanticdb")
 '(server-mode t)
 '(server-raise-frame nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(tool-bar-position (quote right))
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify))
 '(vc-make-backup-files t)
 '(version-control t)
 '(visible-bell t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 90 :width normal)))))

(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(let ((default-directory "~/.emacs.d/elpa"))
  (normal-top-level-add-subdirs-to-load-path))


(add-to-list 'auto-mode-alist '("\\.fsm\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.rdr\\'" . lisp-mode))

(setq auto-mode-alist (append '(("\\.s?html\\.?.*\\'" . html-mode)
				("\\.java\\'" . java-mode) 
				("\\.[hg]s\\'" . haskell-mode)
                                ("\\.hs\\'" . haskell-mode)
				("\\.hi\\'" . haskell-mode)
				("\\.l[hg]s\\'" . literate-haskell-mode))
			      auto-mode-alist))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; set my c-mode indent rules
(c-add-style '"msytsma"
             '((c-basic-offset . 4)
               (tab-width . 4)
               (c-comment-only-line-offset . 0)
               (c-offsets-alist . ((statement-block-intro . +)
                                   (knr-argdecl-intro . +)
                                   (substatement . *)
                                   (substatement-open . 0)
                                   (label . 0)
                                   (case-label . *)
                                   (statement-cont . *)
                                   (statement-case-intro . *)
                                   )))
             )

(c-add-style '"eclipse-java"
             '((c-basic-offset . 4)
               (tab-width . 4)
               (indent-tabs-mode t)
               (c-comment-only-line-offset . (0 . 0))
               ;; the following preserves Javadoc starter lines
               (c-offsets-alist . ((inline-open . 0)
                                   (topmost-intro-cont    . +)
                                   (statement-block-intro . +)
                                   (knr-argdecl-intro     . 5)
                                   (substatement-open     . +)
                                   (substatement-label    . +)
                                   (label                 . +)
                                   (statement-case-open   . +)
                                   (statement-cont        . +)
                                   (arglist-intro  . c-lineup-arglist-intro-after-paren)
                                   (arglist-close  . c-lineup-arglist)
                                   (access-label   . 0)
                                   (inher-cont     . c-lineup-java-inher)
                                   (func-decl-cont . c-lineup-java-throws)
                                   (arglist-cont-nonempty . ++)
                                   )))
             )
;; Fix java 1.5 annotation indentation
(require 'java-mode-indent-annotations)
(add-hook 'java-mode-hook
          '(lambda ()
             (java-mode-indent-annotations-setup)))



(setq c-mode-common-hook
      '(lambda ()

         (setq
;;          c-basic-offset 4
          c-tab-always-indent nil
          c-indent-level 4
          c-continued-statement-offset 2
          c-argdecl-indent 4
          case-fold-search nil
;;          tab-width 4
          )
 

;;         (add-to-list 'c-cleanup-list 'space-before-funcall)
         (add-to-list 'c-cleanup-list 'compact-empty-funcall)
         (add-to-list 'c-cleanup-list 'empty-defun-braces)
         (add-to-list 'c-cleanup-list 'one-liner-defun)
         (add-to-list 'c-cleanup-list 'scope-operator)

         (modify-syntax-entry ?_ "w" c++-mode-syntax-table)
         (modify-syntax-entry ?_ "w" c-mode-syntax-table)
         (linum-mode t)
))

;; (setq c-default-style (append '((c-mode     . "msytsma")
;;                                 (java-mode  . "eclipse-java")
;;                                 (other      . "msytsma")
;; )))


(defun maybe-svncommit-set-hook ()
  (when (and buffer-file-name
             (string-match "svn-commit" buffer-file-name))
    (set-fill-column 79)
    (auto-fill-mode t)
    (flyspell-mode t)
;;    (linum-mode t)
))
(add-hook 'text-mode-hook 'maybe-svncommit-set-hook)
(add-to-list 'auto-mode-alist '("svn-commit\\(\\.[0-9]+\\)?\\.tmp$" . text-mode))

(defun maybe-gitcommit-set-hook ()
  (when (and buffer-file-name
             (string-match "COMMIT_EDITMSG" buffer-file-name))
    (set-fill-column 79)
;;    (auto-fill-mode t)
    (refill-mode t)
    (flyspell-mode t)
    (linum-mode t)
))
(add-hook 'text-mode-hook 'maybe-gitcommit-set-hook)
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG" . text-mode))

;; enable remote file editing
(require 'tramp)
(setq tramp-default-method "scp")


;; enabel cscope C-c s commands
(require 'xcscope)

;;;;;;;;;;;;;;;;;;;; START CEDIT CONFIG ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get cedet http://cedet.sourceforge.net/setup.shtml
;; snapshot from here http://www.randomsample.de/cedet-snapshots/
;; configuration guide http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html
(require 'semantic)
(require 'semantic/ia)
(require 'semantic/bovine/gcc)

(semantic-add-system-include "/usr/src/debug/openmotif-2.3.2/lib/Xm/" 'c-mode)

;;(semantic-add-system-include (expand-file-name "~/nwdc/JSAF_Maintenance_repo/include/libinc") 'c-mode)
;;(semantic-add-system-include (expand-file-name "~/nwdc/JSAF_Maintenance_repo/include/libinc") 'c++-mode)
;;(setq semanticdb-project-roots
;;         (list ;;(expand-file-name "~/nwdc/JSAF_Maintenance_repo")
;;               (expand-file-name "~/nwdc/JSAF_2ndMaintenance_repo")))

;; (global-ede-mode t)
;; (ede-cpp-root-project "Jsaf1"
;;                 :name "Jsaf1 Project"
;;                 :file "~/nwdc/JSAF_Maintenance_repo/Makefile.in"
;;                 :include-path '("/include/libinc"
;;                                 "/include/global"
;;                                 "/libsrc"
;;                                )
;;                 :system-include-path '("~/nwdc/JSAF_Maintenance_repo/include/libinc")
;; ;;                :spp-table '(("isUnix" . "")
;; ;;                             ("BOOST_TEST_DYN_LINK" . ""))
;; )
 
;; (require 'semantic/db-cscope)
;; (when (cedet-cscope-version-check t)
;;   (semanticdb-enable-cscope-databases 'c-mode)
;;   (semanticdb-enable-cscope-databases 'c++-mode))
  
(add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode) 
(add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
(add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode)
;;(add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
;;(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
;;(add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode) ;; only bzr version

;; remove java modes from semantic support
;;(setq semantic-new-buffer-setup-functions (assq-delete-all 'java-mode semantic-new-buffer-setup-functions))
;;(setq semantic-new-buffer-setup-functions (assq-delete-all 'js-mode semantic-new-buffer-setup-functions))

;;(setq semantic-idle-scheduler-working-in-modline-flag t)
;;(setq semantic-complete-inline-analyzer-idle-displayor-class semantic-displayor-tooltip)
(semantic-mode t)

;; use the fast jump instead of the prompt  
(add-hook 'c-mode-common-hook (lambda ()
  (define-key semantic-mode-map (kbd "C-c , j") 'semantic-ia-fast-jump)
))
 
;; adds a tags menu item containing tag info for the current file
(defun my-semantic-hook ()
  (imenu-add-to-menubar "TAGS"))
(add-hook 'semantic-init-hooks 'my-semantic-hook)
 
;; use autocomplete ontop of semantic for pop-up completion lists
(require 'auto-complete-config)
(ac-config-default)
(setq-default ac-sources '(ac-source-semantic))
;; give the ac overlay a nicer look
(set-face-background 'ac-candidate-face "#202020")
;;(set-face-underline 'ac-candidate-face "black")
(set-face-foreground 'ac-candidate-face "white")
(set-face-background 'ac-selection-face "steelblue")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ECLIM ;;;;;
(add-hook 'desktop-after-read-hook ;;after-init-hook
          '(lambda ()
 
             (require 'eclim)
             (require 'eclimd)
             (setq eclimd-default-workspace "~/.eclipse_workspace")
             ;;(setq eclimd-default-workspace nil)
             ;;(setq eclimd-wait-for-process nil)
            
             ;; Add eclim to the autocomplete (ac on in cedet config)
             (require 'ac-emacs-eclim-source)
             (ac-emacs-eclim-config)

             (global-eclim-mode t)
))

;;(add-hook 'eclim-mode-hook
;;          (lambda ()
 
;;            (make-local-variable help-at-pt-display-when-idle)
;;            (setq help-at-pt-display-when-idle t)
;;            (setq help-at-pt-timer-delay 0.1)
;;            (help-at-pt-set-timer)

;;            (add-to-list 'ac-omni-completion-sources
;;                         (cons "\\." '(ac-source-semantic)))
;;            (add-to-list 'ac-omni-completion-sources
;;                         (cons "->" '(ac-source-semantic)))
;;            ))

;; disable the suspend frame key in xwindows
(when window-system
(global-unset-key (kbd "C-x C-z")))

;; start speedbar if we're using a window system
;; (when window-system
;;    (speedbar t))

;; make yes/no questions y/n
(fset 'yes-or-no-p 'y-or-n-p)

(global-set-key [(control tab)] 'other-window)
(global-set-key [M-left] 'windmove-left) 
(global-set-key [M-right] 'windmove-right) 
(global-set-key [M-up] 'windmove-up) 
(global-set-key [M-down] 'windmove-down)

(global-set-key [S-mouse-2] 'browse-url-at-mouse)

(global-set-key [f11] 'menu-bar-mode)
(global-set-key [f12] 'speedbar)


;; ibuffer setup
(global-set-key (kbd "C-x C-b") 'ibuffer) ;;'buffer-menu)
(setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("cfg" (or
                           (name . "^\\.")
                           (filename . "/home/matt/gentoo/")
                           (filename . "/home/matt/\\.")
                           (filename . "/home/msytsma/\\.")))
;;                           (filename . (concat (expand-file-name "~/") "\\."))))
                   ("diskless" (filename . "/var/lib/diskless"))
                   ("etc" (or
                           (filename . "/etc/")
                           (filename . "/var/lib/portage/")))
                   ("WCCD-GUI" (filename . "/home/msytsma/nwdc/spiderman/WCCD_repo/GUI/"))
                   ("WCCD-COM" (filename . "/home/msytsma/nwdc/spiderman/WCCD_repo/COMMON/"))
                   ("WCCD" (filename . "/home/msytsma/nwdc/spiderman/"))
                   ("Octavius" (filename . "/home/msytsma/nwdc/JSAF_WCCD_repo/"))
                   ("JBUS" (filename . "/home/msytsma/nwdc/JBUS_repo/"))
))))

(add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-switch-to-saved-filter-groups "default")))

(require 'uniquify)

;; turn on icicles mode
(add-hook 'desktop-after-read-hook ;;after-init-hook
          '(lambda ()
             (icy-mode 1)
))

;; explicitly turn on undo-tree, the custom options setting misses some desktop restore buffers
(add-hook 'desktop-after-read-hook
          '(lambda ()
             (global-undo-tree-mode 1)
))

;; enable winner mode
(when (fboundp 'winner-mode)
      (winner-mode 1))

;; enable swapping windows
;(require 'transpose-frame)
;(global-set-key (kbd "<C-S-iso-lefttab>") 'rotate-frame)

(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
(global-set-key (kbd "<C-S-iso-lefttab>") 'transpose-buffers)

;; enable a single frame mode for speedbar
(require 'sr-speedbar)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Simple Bookmarks ;;;;;
;;(setq bm-restore-repository-on-load t)
(require 'bm)
(global-set-key (kbd "C-b") 'bm-toggle)
(global-set-key (kbd "M-<next>")   'bm-next)
(global-set-key (kbd "M-<prior>") 'bm-previous)

(add-hook 'auto-save-hook 'bm-save)
(add-hook 'desktop-after-read-hook 'bm-load-and-restore)
(add-hook 'kill-buffer-hook 'bm-buffer-save)
(add-hook 'kill-emacs-hook '(lambda nil
                              (bm-save)))

;; (require 'breadcrumb)
;; (global-set-key (kbd "C-b")        'bc-set)
;; (global-set-key (kbd "M-<next>")   'bc-next)
;; (global-set-key (kbd "M-<prior>")  'bc-previous)
;; (global-set-key (kbd "M-<down>")   'bc-local-next)
;; (global-set-key (kbd "M-<up>")     'bc-local-previous)
;; (global-set-key (kbd "C-S-b")      'bc-list)


;; transparency
 ;;(set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
;;(set-frame-parameter (selected-frame) 'alpha '(70 70))
;;(add-to-list 'default-frame-alist '(alpha 70 70))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; DIRED TWEAKS ;;;;;;;

(defun dired-follow-file ()
 "In dired, visit the file or directory on this line.
If a directory is on the current line, replace the current
dired buffer with one containing the contents of the directory.
Otherwise, invoke `dired-find-file' on the file."
 (interactive)
 (let ((filename (dired-get-filename)))
   ;; if the file is a directory, replace the buffer with the
   ;;  directory's contents
   (if (file-directory-p filename)
       (find-alternate-file filename)
     ;; otherwise simply perform a normal `dired-find-file'
     (dired-find-file))))

(add-hook 'dired-mode-hook
          (lambda ()
            (local-set-key "\C-m" 'dired-follow-file)
            (local-set-key "e" 'dired-follow-file)
            (local-set-key "f" 'dired-follow-file)
            (local-set-key (kbd "<return>") 'dired-follow-file)
            (local-set-key [mouse-1] 'dired-follow-file)
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 0) ))


(put 'dired-find-alternate-file 'disabled nil)

(add-hook 'dired-mode-hook
 (lambda ()
  (define-key dired-mode-map (kbd "^")
    (lambda () (interactive) (find-alternate-file "..")))
  ; was dired-up-directory
 ))

;; chage some settings for shells and gdb
(add-hook 'comint-mode-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 0)))

; (add-hook 'gdb-mode-hook
;           (lambda ()
; ;            (define-key (current-local-map) (kbd "TAB") (insert-char 9 1))
;             (define-key (current-local-map) (kbd "TAB") 'self-insert-command)
; ))

;; modify buffer menu
;; Opens files in other window unless there is only one window
(defun My-buff-menu-open ()
  (interactive)
  (if (= (length (window-list)) 1)
      (Buffer-menu-this-window) (Buffer-menu-other-window)))

(add-hook 'Buffer-menu-mode-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 0)
            (local-set-key (kbd "RET") 'My-buff-menu-open)
            (local-set-key (kbd "M-RET") 'Buffer-menu-this-window) ))

(add-hook 'minibuffer-setup-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 0)))

(add-hook 'cscope-result-mode-hook
          (lambda ()
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 0)))

;; force saving backups on every save
(defun force-backup-of-buffer ()
  (setq buffer-backed-up nil))
(add-hook 'before-save-hook  'force-backup-of-buffer)

;; auto save the desktop state
(defun my-desktop-save ()
  (interactive)
  ;; Don't call desktop-save-in-desktop-dir, as it prints a message.
  (if (eq (desktop-owner) (emacs-pid))
      (desktop-save desktop-dirname)))
(add-hook 'auto-save-hook 'my-desktop-save)

;; save my mini-buffer histories
(setq savehist-additional-variables
      '(search-ring regexp-search-ring command-history shell-command-history extended-command-history file-name-history)
      savehist-file "~/.emacs.d/savehist")
(savehist-mode t)


;;
;; Fix the auto-revert-handler so that if the system time is the
;; same as the new modified time for a file, skip it on this
;; iteration. This should fix race conditions when a file is changed
;; multiple times within the same second.
;; 

(defun file-change-too-close-for-comfort ()
  (let* ((file-time-raw (nth 5 (file-attributes (buffer-file-name))))
         (file-time (+ (lsh (nth 0 file-time-raw) 16) (nth 1 file-time-raw)))
         (current-time (+ (lsh (nth 0 (current-time)) 16) (nth 1 (current-time)))))
    (and (eq current-time file-time)
         (message "%s: postpone revert" (buffer-name))
         t)))


(defun auto-revert-handler ()
  "Revert current buffer, if appropriate.
This is an internal function used by Auto-Revert Mode."
  (when (or auto-revert-tail-mode (not (buffer-modified-p)))
    (let* ((buffer (current-buffer)) size
           (revert
            (or (and buffer-file-name
                     (file-readable-p buffer-file-name)
                     (if auto-revert-tail-mode
                         ;; Tramp caches the file attributes.  Setting
                         ;; `tramp-cache-inhibit' forces Tramp to
                         ;; reread the values.
                         (let ((tramp-cache-inhibit-cache t))
                           (/= auto-revert-tail-pos
                               (setq size
                                     (nth 7 (file-attributes
                                             buffer-file-name)))))
                       (and (not (file-remote-p buffer-file-name))
                            (not (verify-visited-file-modtime buffer))
                            (not (file-change-too-close-for-comfort)))))
                (and (or auto-revert-mode
                         global-auto-revert-non-file-buffers)
                     revert-buffer-function
                     (boundp 'buffer-stale-function)
                     (functionp buffer-stale-function)
                     (funcall buffer-stale-function t))))
           eob eoblist)
      (when revert
        (when (and auto-revert-verbose
                   (not (eq revert 'fast)))
          (message "Reverting buffer `%s'." (buffer-name)))
        ;; If point (or a window point) is at the end of the buffer,
        ;; we want to keep it at the end after reverting.  This allows
        ;; to tail a file.
        (when buffer-file-name
          (setq eob (eobp))
          (walk-windows
           #'(lambda (window)
               (and (eq (window-buffer window) buffer)
                    (= (window-point window) (point-max))
                    (push window eoblist)))
           'no-mini t))
        (if auto-revert-tail-mode
            (auto-revert-tail-handler size)
          ;; Bind buffer-read-only in case user has done C-x C-q,
          ;; so as not to forget that.  This gives undesirable results
          ;; when the file's mode changes, but that is less common.
          (let ((buffer-read-only buffer-read-only))
            (revert-buffer 'ignore-auto 'dont-ask 'preserve-modes)))
        (when buffer-file-name
          (when eob (goto-char (point-max)))
          (dolist (window eoblist)
            (set-window-point window (point-max)))))
      ;; `preserve-modes' avoids changing the (minor) modes.  But we
      ;; do want to reset the mode for VC, so we do it manually.
      (when (or revert auto-revert-check-vc-info)
        (vc-find-file-hook)))))



;; one stop shop for build module and link project
;; recurses up the tree till it finds the project root and adds a link command for the whole project
(defun find-proj-root ()
  "recursively searches upwards from buffer's current dir for the projects root and returns that dir. Or nil if not found or if buffer is not visiting a file"
  (labels
      ((find-proj-r (path)
                    (let* ((parent (file-name-directory path))    
                           (possible-file (concat parent "")))
                      (cond
                       ((file-exists-p (concat possible-file "src/JSAF/GNUmakefile"))
                        (throw 'found-it possible-file))
                       ((string= "/" possible-file)
                        (error "No project found"))
                       (t (find-proj-r (directory-file-name parent)))))))
    (if (buffer-file-name)
        (catch 'found-it
          (find-proj-r (buffer-file-name)))
      (error "Buffer is not visiting a file"))))
 
(defun project-root ()
  (file-name-directory (concat (find-proj-root) "src/JSAF/")))
 
;; hook to change the default compile command
(add-hook 'c-mode-hook '(lambda ()
                          (set (make-local-variable 'compile-command)
                               (concat "make -k && make -k -C " (project-root)))))

;; define a function to call from the mini buffer to build project
(defun compilel ()
  (interactive)
  ;; Compile current buffer AND the src/JSAF dir
  (compile (concat "make -k && make -k -C " (project-root))))


(setq initial-scratch-message "
;;  {o,o}
;; ./)_)
;;   \" \"
;;
;;")


;; little function to help when scratchpadding binary calculations
(defun  as-binary(x)
  (interactive)
  (concat "#b"
          (let ((calc-number-radix 2))
            (math-format-radix x))))
